(define term (js-eval "document.getElementById('term')"))
(js-invoke (getelem term) "LoadingOverlay" "show" (js-obj "image" "" "progress" #t))
(set-style! term "font" "18px / 20px Courier New")
(sleep 0.5)
(js-invoke (getelem term) "LoadingOverlay" "progress" 10)
(if (not (string=? (get-style term "font") "18px / 20px Courier New"))
    (set-style! term "font" "18px / 20px monospace"))
(sleep 0.5)
(js-invoke (getelem term) "LoadingOverlay" "progress" 20)
(set-style! term "backgroundColor" "transparent")
(display "N=71456335213936339667583931974144970765327963434711239325932911324065698399442011")
(sleep 0.5)
(js-invoke (getelem term) "LoadingOverlay" "progress" 30)
(display "c=1085267300152893114288803146806622529202080626206924102794738916250870161499231")
(sleep 0.5)
(js-invoke (getelem term) "LoadingOverlay" "progress" 35)
(display "e=65537")
(sleep 0.5)
(js-invoke (getelem term) "LoadingOverlay" "progress" 40)
(display "https://nodokaha.github.io/images/yui.jpg")
(sleep 0.5)
(js-invoke (getelem term) "LoadingOverlay" "progress" 50)
(display "https://nodokaha.github.io/chall.c")
(sleep 0.5)
(js-invoke (getelem term) "LoadingOverlay" "progress" 60)
(display "https://nodokaha.github.io/chall")
(sleep 0.5)
(js-invoke (getelem term) "LoadingOverlay" "progress" 70)
(display "CTFという競技は、いわゆるホワイトハッカー達\nが競い合っているセキュリティ大会です!")
(sleep 0.5)
(js-invoke (getelem term) "LoadingOverlay" "progress" 80)
(display "このサイトには、9つのフラグが隠れています。")
(sleep 0.5)
(js-invoke (getelem term) "LoadingOverlay" "progress" 90)
(display "見つけられますか？")
(display "https://nodokaha.github.io/CTF.html")

(sleep 0.5)
(js-invoke (getelem term) "LoadingOverlay" "progress" 100)
(display "\"(help)\"とタイプすると助けを求めれます。")
(js-invoke (getelem term) "LoadingOverlay" "hide")
(define (tictactoe)
  (letrec ((game-map '("1" "2" "3" "4" "5" "6" "7" "8" "9")) (print-board (lambda (gmap) (begin (display (list "----------\n|" (car gmap) "|" (cadr gmap) "|" (caddr gmap) "|")))(if (null? (cdddr gmap)) (begin  (display "------------") (newline)) (print-board (cdddr gmap))))) (update (lambda (num mark) (letrec ((nth-write (lambda (n m nlist) (let loop ((x 0)(nlist nlist)) (if (= x n) (apply list m (cdr nlist)) (cons (car nlist) (loop (+ x 1) (cdr nlist)))))))) (set! game-map (nth-write num mark game-map)) (print-board game-map)))) (check (lambda (mark) (call/cc (lambda (return) (letrec ((check-iter (lambda (mark check-map) (apply string=? (cons mark (map (lambda (x) (list-ref game-map x)) check-map)))))) (let loop ((check-map '((0 1 2)(3 4 5)(6 7 8)(0 3 6)(1 4 7)(2 5 8)(0 4 8)(2 4 6)))) (if (null? (cdr check-map)) (check-iter mark (car check-map)) (begin (if (check-iter mark (car check-map)) (return #t) (loop (cdr check-map))))))))))) (enemy_ai草ww (lambda (gmap mark) (let ((enemy-map (filter string->number gmap))) (update (- (string->number (list-ref enemy-map (random-integer (length enemy-map)))) 1) mark)))) (mark (if (eq? (random-integer 2) 1) (begin (display "貴方が先行です!\n") (print-board game-map) "○") (begin (display "貴方が後攻です!\n") (enemy_ai草ww game-map "○") "×"))) (user-input ""))
    (let main ()
      (call/cc (lambda (return)
	(if (null? (filter string->number game-map))
	    (cond ((check mark) (display "You win!\nHere you are flag!\nTKCTF{tictact0e}"))
		  ((check (if (string=? mark "○") "×" "○")) (display "You lose!\n"))
		  (else (display "draw!\n")))
	    (begin
	    (let loop ()
	    (set! user-input (read))
	    (if (and (number? user-input) (positive? user-input) (< user-input 10) (not ((lambda (x) (or (car x) (cadr x))) (map (lambda (i) (string=? i (list-ref game-map (- user-input 1)))) '("○" "×")))))
		(update (- user-input 1) mark)
		(begin (display "please You can put 0~9 number: ") (loop))))
	    (cond ((check mark)  (display "You win!\nHere you are flag!\nTKCTF{tictact0e}"))
		  ((check (if (string=? mark "○") "×" "○")) (display "You lose!\n"))
		  (else (enemy_ai草ww game-map (if (string=? "○" mark) "×" "○")) (if (check (if (string=? mark "○") "×" "○")) (return (display "You lose!\n")) #f) (main)))
	    )))))
    (display "Thank You playing!\n")))
;; (define (display-term x) (let ((temp (string->listf x))) (map (lambda 
(cond
 ((< (element-width term) 900) (let ((display-talk (lambda (x) (display (list-ref x (random-integer (length x))))))(bigtitle '("\n +-+-+-+-+-+-+-+-+-+-+\n |T|K|C|T|F|-|c|l|u|b|\n +-+-+-+-+-+-+-+-+-+-+\n" "\n            )            (                       \n  *   )  ( /(  (    *   ))% )       (         )  \n` )  /(  )%()) )% ` )  /(()/(       )%  (  ( /(  \n ( )(_))((_)%(((_) ( )(_))(_))___( ((_)))% )%()) \n(_(_())|_ ((_)%___(_(_()|_))_|___)% _ /((_|(_)%  \n|_   _|| |/ ((/ __|_   _| |_    ((_) (_))(| |(_) \n  | |    ' < | (__  | | | __|  / _|| | || | '_ % \n  |_|   _|%_% %___| |_| |_|    %__||_|%_,_|_.__/ \n                                                 \n" "\n╔╦╗╦╔═╔═╗╔╦╗╔═╗  ┌─┐┬  ┬ ┬┌┐ \n ║ ╠╩╗║   ║ ╠╣───│  │  │ │├┴┐\n ╩ ╩ ╩╚═╝ ╩ ╚    └─┘┴─┘└─┘└─┘\n"))) (map display-talk (list bigtitle))))
 ((< (element-width term) 1500) (let ((display-talk (lambda (x) (display (list-ref x (random-integer (length x))))))(bigtitle '("\n▄▄▄█████▓ ██ ▄█▀ ▄████▄  ▄▄▄█████▓  █████▒▄████▄   ██▓     █    ██  ▄▄▄▄   \n▓  ██▒ ▓▒ ██▄█▒ ▒██▀ ▀█  ▓  ██▒ ▓▒▓██   ▒▒██▀ ▀█  ▓██▒     ██  ▓██▒▓█████▄ \n▒ ▓██░ ▒░▓███▄░ ▒▓█    ▄ ▒ ▓██░ ▒░▒████ ░▒▓█    ▄ ▒██░    ▓██  ▒██░▒██▒ ▄██\n░ ▓██▓ ░ ▓██ █▄ ▒▓▓▄ ▄██▒░ ▓██▓ ░ ░▓█▒  ░▒▓▓▄ ▄██▒▒██░    ▓▓█  ░██░▒██░█▀  \n  ▒██▒ ░ ▒██▒ █▄▒ ▓███▀ ░  ▒██▒ ░ ░▒█░   ▒ ▓███▀ ░░██████▒▒▒█████▓ ░▓█  ▀█▓\n  ▒ ░░   ▒ ▒▒ ▓▒░ ░▒ ▒  ░  ▒ ░░    ▒ ░   ░ ░▒ ▒  ░░ ▒░▓  ░░▒▓▒ ▒ ▒ ░▒▓███▀▒\n    ░    ░ ░▒ ▒░  ░  ▒       ░     ░       ░  ▒   ░ ░ ▒  ░░░▒░ ░ ░ ▒░▒   ░ \n  ░      ░ ░░ ░ ░          ░       ░ ░   ░          ░ ░    ░░░ ░ ░  ░    ░ \n         ░  ░   ░ ░                      ░ ░          ░  ░   ░      ░      \n                ░                        ░                               ░ \n" "\n████████╗██╗  ██╗ ██████╗████████╗███████╗     ██████╗██╗     ██╗   ██╗██████╗ \n╚══██╔══╝██║ ██╔╝██╔════╝╚══██╔══╝██╔════╝    ██╔════╝██║     ██║   ██║██╔══██╗\n   ██║   █████╔╝ ██║        ██║   █████╗█████╗██║     ██║     ██║   ██║██████╔╝\n   ██║   ██╔═██╗ ██║        ██║   ██╔══╝╚════╝██║     ██║     ██║   ██║██╔══██╗\n   ██║   ██║  ██╗╚██████╗   ██║   ██║         ╚██████╗███████╗╚██████╔╝██████╔╝\n   ╚═╝   ╚═╝  ╚═╝ ╚═════╝   ╚═╝   ╚═╝          ╚═════╝╚══════╝ ╚═════╝ ╚═════╝ \n"))) (map display-talk (list bigtitle))))
 (else (let ((display-talk (lambda (x) (display (list-ref x (random-integer (length x))))))(bigtitle '("\n       _            _               _           _            _                    _             _       _                  _        \n      /% %         /%_%           /% %         /% %         /% %                /% %           _% %    /%_%               / /%      \n      %_% %       / / /  _       /  % %        %_% %       /  % %              /  % %         /%__ %  / / /         _    / /  %     \n      /%__ %     / / /  /%_%    / /% % %       /%__ %     / /% % %            / /% % %       / /_ %_% % % %__      /%_% / / /% %    \n     / /_ % %   / / /__/ / /   / / /% % %     / /_ % %   / / /% %_%  ____    / / /% % %     / / /%/_/  % %___%    / / // / /% % %   \n    / / /% % % / /%_____/ /   / / /  % %_%   / / /% % % / /_/_ %/_//%____/% / / /  % %_%   / / /        %__  /   / / // / /% %_% %  \n   / / /  %/_// /%_______/   / / /    %/_/  / / /  %/_// /____/%   %/____%// / /    %/_/  / / /         / / /   / / // / /% % %___% \n  / / /      / / /% % %     / / /          / / /      / /%____%/          / / /          / / / ____    / / /   / / // / /  % % %__/ \n / / /      / / /  % % %   / / /________  / / /      / / /               / / /________  / /_/_/ ___/% / / /___/ / // / /____%_% %   \n/_/ /      / / /    % % % / / /_________%/_/ /      / / /               / / /_________%/_______/%__%// / /____%/ // / /__________%  \n%_%/       %/_/      %_%_%%/____________/%_%/       %/_/                %/____________/%_______%/    %/_________/ %/_____________/  \n                                                                                                                                    \n"
												       "\n        ,----,                              ,----,                                                            \n      ,/   .`|       ,--.                 ,/   .`|                                                            \n    ,`   .'  :   ,--/  /|  ,----..      ,`   .'  :   ,---,.                    ,--,                           \n  ;    ;     /,---,': / ' /   /   \\   ;    ;     / ,'  .' |                  ,--.'|                  ,---,    \n.'___,/    ,' :   : '/ / |   :     :.'___,/    ,',---.'   |    ,---,.        |  | :            ,--,,---.'|    \n|    :     |  |   '   ,  .   |  ;. /|    :     | |   |   .'  ,'  .' |        :  : '          ,'_ /||   | :    \n;    |.';  ;  '   |  /   .   ; /--` ;    |.';  ; :   :  :  ,---.'   , ,---.  |  ' |     .--. |  | ::   : :    \n`----'  |  |  |   ;  ;   ;   | ;    `----'  |  | :   |  |-,|   |    |/     \\ '  | |   ,'_ /| :  . |:     |,-. \n    '   :  ;  :   '   \\  |   : |        '   :  ; |   :  ;/|:   :  .'/    / ' |  | :   |  ' | |  . .|   : '  | \n    |   |  '  |   |    ' .   | '___     |   |  ' |   |   .':   |.' .    ' /  '  : |__ |  | ' |  | ||   |  / : \n    '   :  |  '   : |.  \\'   ; : .'|    '   :  | '   :  '  `---'   '   ; :__ |  | '.'|:  | : ;  ; |'   : |: | \n    ;   |.'   |   | '_\\.''   | '/  :    ;   |.'  |   |  |          '   | '.'|;  :    ;'  :  `--'   \\   | '/ : \n    '---'     '   : |    |   :    /     '---'    |   :  \\          |   :    :|  ,   / :  ,      .-./   :    | \n              ;   |,'     \\   \\ .'               |   | ,'           \\   \\  /  ---`-'   `--`----'   /    \\  /  \n              '---'        `---`                 `----'              `----'                        `-'----'   \n                                                                                                              \n"
												"\"\n.------..------..------..------..------..------..------..------..------..------.\n|T.--. ||K.--. ||C.--. ||T.--. ||F.--. ||-.--. ||C.--. ||L.--. ||U.--. ||B.--. |\n| :/\\: || :/\\: || :/\\: || :/\\: || :(): || (\\/) || :/\\: || :/\\: || (\\/) || :(): |\n| (__) || :\\/: || :\\/: || (__) || ()() || :\\/: || :\\/: || (__) || :\\/: || ()() |\n| \'--\'T|| \'--\'K|| \'--\'C|| \'--\'T|| \'--\'F|| \'--\'-|| \'--\'C|| \'--\'L|| \'--\'U|| \'--\'B|\n`------\'`------\'`------\'`------\'`------\'`------\'`------\'`------\'`------\'`------\'\n\""
												"\n ,--.--------.  ,--.-.,-.   _,.----.  ,--.--------.    _,---.                  _,.----.                                     \n/==/,  -   , -\/==/- |\  \.' .' -   \/==/,  -   , -\.-`.' ,  \               .' .' -   \   _.-.    .--.-. .-.-.   _..---.   \n\==\.-.  - ,-./|==|_ `/_ /==/  ,  ,-'\==\.-.  - ,-./==/_  _.-' ,--.--------./==/  ,  ,-' .-,.'|   /==/ -|/=/  | .' .'.-. \  \n `--`\==\- \   |==| ,   /|==|-   |  . `--`\==\- \ /==/-  '..-./==/,  -   , -\==|-   |  .|==|, |   |==| ,||=| -|/==/- '=' /  \n      \==\_ \  |==|-  .| |==|_   `-' \     \==\_ \|==|_ ,    /\==\.-.  - ,-./==|_   `-' \==|- |   |==|- | =/  ||==|-,   '   \n      |==|- |  |==| _ , \|==|   _  , |     |==|- ||==|   .--'  `--`--------`|==|   _  , |==|, |   |==|,  \/ - ||==|  .=. \  \n      |==|, |  /==/  '\  \==\.       /     |==|, ||==|-  |                  \==\.       /==|- `-._|==|-   ,   //==/- '=' ,| \n      /==/ -/  \==\ /\=\.'`-.`.___.-'      /==/ -//==/   \                   `-.`.___.-'/==/ - , ,/==/ , _  .'|==|   -   /  \n      `--`--`   `--`                       `--`--``--`---'                              `--`-----'`--`..---'  `-._`.___,'   \n" "\n .-') _   .-. .-')            .-') _                                                    .-. .-')   \n(  OO) )  %  ( OO )          (  OO) )                                                   %  ( OO )  \n/     '._ ,--. ,--.   .-----./     '._    ,------.          .-----. ,--.     ,--. ,--.   ;-----.%  \n|'--...__)|  .'   /  '  .--./|'--...__)('-| _.---'  .-')   '  .--./ |  |.-') |  | |  |   | .-.  |  \n'--.  .--'|      /,  |  |('-.'--.  .--'(OO|(_%    _(  OO)  |  |('-. |  | OO )|  | | .-') | '-' /_) \n   |  |   |     ' _)/_) |OO  )  |  |   /  |  '--.(,------./_) |OO  )|  |`-' ||  |_|( OO )| .-. `.  \n   |  |   |  .   %  ||  |`-'|   |  |   %_)|  .--' '------'||  |`-'|(|  '---.'|  | | `-' /| |  %  | \n   |  |   |  |%   %(_'  '--'%   |  |     %|  |_)         (_'  '--'% |      |('  '-'(_.-' | '--'  / \n   `--'   `--' '--'   `-----'   `--'      `--'              `-----' `------'  `-----'    `------'  \n"))) (map display-talk (list bigtitle)))))
(define (modulo x y) (if (string? x) (let ((modulo-iter (js-eval "function checkIBAN(iban, N) {const parts = iban.match(/.{1,6}/g);return parts.reduce((prev, curr) => Number(prev + curr) % N, '');};checkIBAN"))) (js-call modulo-iter x y)) (display "x(一番目)は文字列でお願いします。xだけです。")))
;(define (modulo x y) (let ((modulo-iter (js-eval "math.mod"))) (js-call modulo-iter x y)))
(define (prime? n) (if (string? n) (if (< (string->number n) 2) #f (do ((x 2 (+ x 1))(f #f (= (modulo n x) 0))) ((or f (> x (sqrt (string->number n)))) (if f #f #t)))) (display "文字列でお願いします。")))
;(define (bigint x) (let ((bigint-iter (js-eval "BigInt"))) (js-call bigint-iter x)))
(define (factor-brute-1 N) (if (string? N) (do ((x 2 (+ x 1))) ((= (modulo N x) 0) x)) (display "文字列でお願いします。")))
;(define (modulo-expt a b c) (if (= b -1) (if (prime? a) (let ((modulo-inverse (lambda (x y) (do ((n 0 (+ n 1))) ((= (modulo (number->string (* n x)) y) 1) n))))) (modulo-inverse a c)) (display "Not calc modulo-inverse")) (modulo (expt a b) c)))
(define (modulo-expt a b c) (if (= b -1) (if (prime? (number->string a)) (let ((modulo-inverse (lambda (x y) (do ((n 0 (+ n 1))) ((= (modulo (number->string (* n x)) y) 1) n))))) (modulo-inverse a c)) (display "Not calc modulo-inverse")) (modulo (number->string (expt a b)) c)))
(define (help) (display "どうも、初めまして。\nあなたが何者か知りませんが、このサイトに訪れたということは\n何かしらの縁があったということです。\n是非とも我々高専の裏組織サークルであるTKCTF-clubに入部下さい…。\nですが、あなたの実力を知らない以上\n容易に高専の裏情報を教える訳にはいけません。\nこのサイトにはいくつかのフラグという情報が隠されています。\nフラグはTKCTF{ほにゃらら}という形になっていますので\n是非とも高専の裏情報を取得する準備運動と思って挑戦してみてください。\n\"(factor-brute-1 \"N\")\": Nを総当たりで素因数分解します。一回だけの操作です。\n\"(tictactoe)\": ○×ゲームです。"))
(define (talk)
    (let ((talk '("はい、どうも。"
		  "ヒントとか欲しいですかね？"
		  "正直入ってくれる人なんて居ないだろうなあと"
		  "RSA暗号って知ってますか？"))
	(display-talk (lambda (x) (display (list-ref x (random-integer (length x)))))))
    (display-talk talk)))

